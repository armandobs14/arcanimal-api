generator client {
  provider = "prisma-client-js"
  seed = "ts-node prisma/seed/seed.ts"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Pet {
  id        Int      @id @default(autoincrement())
  location  String
  contact   String
  gender    String
  breed     String
  size      String
  type      String  
  color     String
  name      String
  url       String
  found     Boolean
  details   String
  shelterId Int?       
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  updatedBy  Int   

  Shelter   Shelter?  @relation(fields: [shelterId], references: [id])
}

model User {
  id    Int    @id @default(autoincrement())
  name  String
  phone String
  email String @unique
  password String
  role  Role
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  updatedBy  Int   

  refreshTokens RefreshToken[] 
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  userId     Int
  token      String   @unique
  expiryDate DateTime

  user User @relation(fields: [userId], references: [id])
}

model Shelter {
  id          Int    @id @default(autoincrement())
  location    String 
  address     String? 
  name        String
  email       String?
  phone       String?
  occupation  Int? 
  capacity    Int?
  owner String?
  needs       String[] @default([])
  other_needs String @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   Int   

  Pets        Pet[]
}

model Image {
  id        Int     @id @default(autoincrement())
  filePath  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Role {
  admin
  volunteer
}

